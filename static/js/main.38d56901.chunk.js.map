{"version":3,"sources":["logo.svg","components/ToDoForm.js","components/ToDo.js","components/ToDoList.js","App.js","reportWebVitals.js","index.js"],"names":["ToDoForm","props","useState","edit","value","input","setInput","inputRef","useRef","handleSubmit","e","preventDefault","onSubmit","id","Math","floor","random","text","handleChange","target","className","placeholder","onChange","name","ref","onClick","ToDo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","ToDoList","setTodos","test","newTodos","console","log","updatedTodos","removedArr","filter","todoId","newValue","prev","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAAe,I,mBC8DAA,MA5Df,SAAkBC,GAEd,MAAwBC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAAjE,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAWC,iBAAO,MAOlBC,EAAa,SAAAC,GACfA,EAAEC,iBAEFV,EAAMW,SAAS,CACXC,GAAIC,KAAKC,MAAoB,IAAdD,KAAKE,UACpBC,KAAKZ,IAGTC,EAAS,KAEPY,EAAa,SAAAR,GACfJ,EAASI,EAAES,OAAOf,QAItB,OACI,sBAAMQ,SAAUH,EAAcW,UAAU,YAAxC,SACDnB,EAAME,KACL,qCACE,uBACEkB,YAAY,mBACZjB,MAAOC,EACPiB,SAAUJ,EACVK,KAAK,OACLC,IAAKjB,EACLa,UAAU,oBAEZ,wBAAQK,QAAShB,EAAcW,UAAU,mBAAzC,uBAKF,qCACE,uBACEC,YAAY,aACZjB,MAAOC,EACPiB,SAAUJ,EACVK,KAAK,OACLH,UAAU,aACVI,IAAKjB,IAEP,wBAAQkB,QAAShB,EAAcW,UAAU,cAAzC,4B,sBCpBKM,MA5Bf,YAAgE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAC7C,EAAwB5B,mBAAS,CAC7BW,GAAI,KACJT,MAAO,KAFX,mBAAOD,EAAP,KAAa4B,EAAb,KAWA,OAAI5B,EAAKU,GACE,cAAC,EAAD,CAAUV,KAAMA,EAAMS,SARZ,SAAAR,GACjB0B,EAAW3B,EAAKU,GAAIT,GACpB2B,EAAQ,CACJlB,GAAI,KACJT,MAAO,QAMRuB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBAAKd,UAAWa,EAAKE,WAAa,oBAAsB,WAAxD,UACI,qBAAmBV,QAAS,kBAAMG,EAAaK,EAAKpB,KAApD,SACKoB,EAAKhB,MADAgB,EAAKpB,IAGf,sBAAKO,UAAU,QAAf,UACI,cAAC,IAAD,CAAQK,QAAS,kBAAMM,EAAQ,CAAElB,GAAIoB,EAAKpB,GAAIT,MAAO6B,EAAKhB,QAASG,UAAU,cAC7E,cAAC,IAAD,CAAmBK,QAAS,kBAAMI,EAAWI,EAAKpB,KAAKO,UAAU,qBANAc,OCwBlEE,MAzCf,WACI,MAA0BlC,mBAAS,IAAnC,mBAAOyB,EAAP,KAAcU,EAAd,KA+BA,OACI,gCACI,4DACA,cAAC,EAAD,CAAUzB,SAjCF,SAAAqB,GAAS,IAAD,EACpB,GAAKA,EAAKhB,OAAQ,QAAQqB,KAAKL,EAAKhB,MAApC,CAGA,IAAMsB,EAAQ,CAAIN,GAAJ,mBAAaN,IAE3BU,EAASE,IACT,EAAAC,SAAQC,IAAR,oBAAed,QA2BX,cAAC,EAAD,CAAMA,MAAOA,EAAOC,aAbP,SAAAf,GACjB,IAAI6B,EAAef,EAAMK,KAAI,SAAAC,GAIzB,OAHIA,EAAKpB,KAAOA,IACZoB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXI,EAASK,IAM2Cb,WAzBrC,SAAAhB,GACf,IAAM8B,EAAa,YAAIhB,GAAOiB,QAAO,SAAAX,GAAI,OAAIA,EAAKpB,KAAOA,KAEzDwB,EAASM,IAsBmEb,WApB7D,SAACe,EAAQC,GACnBA,EAAS7B,OAAQ,QAAQqB,KAAKQ,EAAS7B,OAI5CoB,GAAS,SAAAU,GAAI,OAAIA,EAAKf,KAAI,SAAAgB,GAAI,OAAKA,EAAKnC,KAAOgC,EAASC,EAAWE,eCZ5DC,MATf,WACE,OACE,sBAAK7B,UAAU,MAAf,UACE,2CACA,cAAC,EAAD,QCIS8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.38d56901.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState, useEffect, useRef} from 'react'\r\n\r\nfunction ToDoForm(props) {\r\n\r\n    const [input, setInput]=useState(props.edit ? props.edit.value : '');\r\n    const inputRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     inputRef.current.focus();\r\n//   });\r\n\r\n\r\n    const handleSubmit=e=>{\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random()*1000),\r\n            text:input\r\n        });\r\n\r\n        setInput('');\r\n    }\r\n    const handleChange=e=>{\r\n        setInput(e.target.value);\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className='todo-form'>\r\n      {props.edit ? (\r\n        <>\r\n          <input\r\n            placeholder='Update your item'\r\n            value={input}\r\n            onChange={handleChange}\r\n            name='text'\r\n            ref={inputRef}\r\n            className='todo-input edit'\r\n          />\r\n          <button onClick={handleSubmit} className='todo-button edit'>\r\n            Update\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <input\r\n            placeholder='Add a todo'\r\n            value={input}\r\n            onChange={handleChange}\r\n            name='text'\r\n            className='todo-input'\r\n            ref={inputRef}\r\n          />\r\n          <button onClick={handleSubmit} className='todo-button'>\r\n            Add todo\r\n          </button>\r\n        </>\r\n      )}\r\n    </form>\r\n    )\r\n}\r\n\r\nexport default ToDoForm\r\n","import React, { useState } from 'react'\r\n\r\nimport { TiEdit } from 'react-icons/ti'\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport ToDoForm from './ToDoForm';\r\nfunction ToDo({ todos, completeTodo, removeTodo, updateTodo }) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    })\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value);\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        });\r\n    };\r\n    if (edit.id) {\r\n        return <ToDoForm edit={edit} onSubmit={submitUpdate} />;\r\n    }\r\n    return todos.map((todo, index) => (\r\n        <div className={todo.isComplete ? 'todo-row-complete' : 'todo-row'} key={index}>\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                {todo.text}\r\n            </div>\r\n            <div className='icons'>\r\n                <TiEdit onClick={() => setEdit({ id: todo.id, value: todo.text })} className='edit-icon' />\r\n                <RiCloseCircleLine onClick={() => removeTodo(todo.id)} className='delete-icon' />\r\n            </div>\r\n        </div>\r\n    ))\r\n}\r\n\r\nexport default ToDo\r\n","import React, { useState } from 'react';\r\nimport ToDoForm from './ToDoForm';\r\nimport ToDo from './ToDo';\r\n\r\nfunction ToDoList() {\r\n    const [todos, setTodos] = useState([])\r\n    const addToDo = todo => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return\r\n        }\r\n        const newTodos = [todo, ...todos];\r\n\r\n        setTodos(newTodos);\r\n        console.log(...todos);\r\n    }\r\n    const removeTodo = id => {\r\n        const removedArr = [...todos].filter(todo => todo.id !== id);\r\n\r\n        setTodos(removedArr);\r\n    };\r\n    const updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n\r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n    };\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n    return (\r\n        <div>\r\n            <h1>What is the plan for today</h1>\r\n            <ToDoForm onSubmit={addToDo} />\r\n            <ToDo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoList\r\n","import logo from './logo.svg';\nimport './App.css';\nimport ToDoForm from './components/ToDoForm';\nimport ToDoList from './components/ToDoList';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>ToDo List</h1>\n      <ToDoList/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}